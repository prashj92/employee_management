<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\User;
use Auth;

class PassportAuthController extends Controller
{
    /**
     * Registration
     */
    public function register(Request $request)
    {
        $this->validate($request, [
            'name' => 'required|min:4',
            'email' => 'required|email',
            'password' => 'required|min:4',
        ]);
 
        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => bcrypt($request->password)
        ]);
       
        $token = $user->createToken('LaravelAuthApp')->accessToken;
 
        return response()->json(['token' => $token,'user_id' => $user->id], 200);
    }

    /**
     * Login
     */
    public function login(Request $request)
    {
        $data = [
            'email' => $request->email,
            'password' => $request->password
        ];
 
        if (auth()->attempt($data)) {
            $token = auth()->user()->createToken('LaravelAuthApp')->accessToken;
            return response()->json(['token' => $token,'user_id' => auth()->user()->id], 200);
        } else {
            return response()->json(['error' => 'Unauthorised'], 401);
        }
    }

    public function logoutApi()
    { 
        if (Auth::check()) {
            Auth::user()->AauthAcessToken()->delete();
        }
    }

    public function updateProfile($user_id, Request $request)
    {
        $user = User::find($user_id);
        if ($request->isMethod("post")) {

            // $data = $request->all();
            
            // $user = Auth::guard('api')->user();
            // return response()->json(['user_id' => $user], 200);
            //Changing the password only if is different of null
            // if( isset($data['oldPassword']) && !empty($data['oldPassword']) && $data['oldPassword'] !== "" && $data['oldPassword'] !=='undefined') {
            //     //checking the old password first
            //     $check  = Auth::guard('web')->attempt([
            //         'username' => $user->username,
            //         'password' => $data['oldPassword']
            //     ]);
            //     if($check && isset($data['newPassword']) && !empty($data['newPassword']) && $data['newPassword'] !== "" && $data['newPassword'] !=='undefined') {
            //         $user->password = bcrypt($data['newPassword']);
            //         $user->isFirstTime = false; //variable created by me to know if is the dummy password or generated by user.
            //         $user->token()->revoke();
            //         $token = $user->createToken('newToken')->accessToken;

            //         //Changing the type
            //         $user->save();

            //         return json_encode(array('token' => $token)); //sending the new token
            //     }
            //     else {
            //         return "Wrong password information";
            //     }
            // }
            // return "Wrong password information";



            $name = $request->name;
            $email = $request->email;
            $password = bcrypt($request->password);


            $user->name = $name;
            $user->email = $email;
            $user->password = $password;
            $user->save();

            return response()->json(['user_id' => $user->id], 200);
        }
    }
}
